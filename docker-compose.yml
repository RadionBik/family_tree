services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: family_tree_backend
    env_file:
      - .env # Load variables from .env file
    environment:
      # Define DATABASE_URL for SQLite, pointing inside the container volume
      DATABASE_URL: sqlite+aiosqlite:////app/data/app.db
      APP_ENV: ${APP_ENV:-production} # Default to production if not set
    volumes:
      - app_logs:/app/logs # Mount named volume for logs
      - sqlite_data:/app/data # Mount named volume for SQLite DB file
      # No code mounting for production
    ports:
      # Expose port 8000 internally; map externally only if no reverse proxy
      - "8000:8000"
    # No database dependency needed for SQLite
    restart: unless-stopped
    # Healthcheck is defined in the backend Dockerfile

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # Pass build args if needed, e.g., for VITE_API_BASE_URL if not using relative paths
      # args:
      #   VITE_API_BASE_URL: ${VITE_API_BASE_URL:-/api}
    container_name: family_tree_frontend
    ports:
      # Map host port 80 (or e.g., 8080) to container port 80 (Nginx)
      - "80:80"
    # No volumes needed for production build (static files are in the image)
    # No environment needed for Nginx unless customizing its config dynamically
    depends_on:
      - backend # Optional, depends if frontend needs backend at build time (it doesn't here)
    restart: unless-stopped

volumes:
  sqlite_data: # Volume for the SQLite database file
    driver: local
  app_logs:
    driver: local
